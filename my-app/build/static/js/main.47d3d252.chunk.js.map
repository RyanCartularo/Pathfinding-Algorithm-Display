{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/Breadth.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","breadth","START_NODE_ROW","START_NODE_COL","FINISH_NODE_COL","FINISH_NODE_ROW","createNode","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","i","setTimeout","animateShortestPath","document","getElementById","animateDijkstra","animateAStar","window","location","reload","console","log","onClick","visualizeDijkstra","visualizeBreadth","clearGrid","map","rowIdx","nodeIdx","handleMouseDown","onMouseEnter","handleMouseEnter","handleMouseUp","currentRow","slice","newNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.47d3d252.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport function startNode (nodes) {\r\n  \r\n  const dragStart = e => {\r\n    const target = e.target;\r\n\r\n    e.dataTransfer.setData('start_id', target.id);\r\n\r\n    setTimeout(() => {\r\n      target.style.display = \"none\";\r\n    }, 0);\r\n  }\r\n\r\n  const dragOver = e => {\r\n    e.stopPropagation();\r\n  }\r\n\r\n  return (\r\n    <div \r\n      id={nodes.id}\r\n      className={nodes.className}\r\n      draggable=\"true\"\r\n      onDragStart={dragStart}\r\n      onDragOver= {dragOver}\r\n    >\r\n      { nodes.children }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n     // onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        //onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}","export function dijkstra(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode){\r\n    return false;\r\n  }\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      if (closestNode.isWall) continue;  //If there is a wall in our way we can not go through it\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder; // If the nearest node has a distnace of infinity than we must not be able to reach our goal so we stop\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","export function breadth(grid, startNode, finishNode, START_NODE_ROW, START_NODE_COL, FINISH_NODE_COL, FINISH_NODE_ROW){\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      if (closestNode.isWall) continue;  //If there is a wall in our way we can not go through it\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder; // If the nearest node has a distnace of infinity than we must not be able to reach our goal so we stop\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport {breadth} from '../algorithms/Breadth';\r\nimport './PathfindingVisualizer.css';\r\n\r\nvar START_NODE_ROW = 10;\r\nlet START_NODE_COL = 25;\r\nlet FINISH_NODE_ROW = 10;\r\nlet FINISH_NODE_COL = 50;\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 5.2 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  animateAStar(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 5.2 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 5 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 39 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  visualizeBreadth() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = breadth(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAStar(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  clearGrid() {\r\n    window.location.reload();\r\n  }\r\n\r\n  incrementStartRow() {\r\n    this.setState({ START_NODE_ROW: this.state.START_NODE_ROW + 1});\r\n    console.log(this.state)\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <button id=\"BTN1\" onClick={() => this.visualizeDijkstra()}>\r\n          Dijkstra's Algorithm\r\n        </button>\r\n        <button id=\"BTN2\" onClick={() => this.visualizeBreadth()}>\r\n          Breadth First Algorithm\r\n        </button>\r\n        <button id=\"BTNC\" onClick={() => this.clearGrid()}>\r\n          Clear The Grid\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 29; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 75; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n","\nimport React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}